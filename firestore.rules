rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return request.auth.uid == userId;
    }
    
    function isWithinRateLimit() {
      let today = timestamp.date();
      let userAppointments = getAfter(/databases/$(database)/documents/Pending Appointments/$(request.auth.uid)).data.createdAt;
      return userAppointments.date() == today && userAppointments.size() < 3;
    }
    
    function hasValidCooldown() {
      let lastSubmission = getAfter(/databases/$(database)/documents/Pending Appointments/$(request.auth.uid)).data.createdAt;
      return request.time.toMillis() - lastSubmission.toMillis() >= 300000; // 5 minutes in milliseconds
    }

    // Pending Appointments collection rules
    match /Pending Appointments/{documentId} {
      allow read: if isAuthenticated() && isOwner(resource.data.userId);
      allow create: if isAuthenticated() 
        && request.resource.data.userId == request.auth.uid
        && isWithinRateLimit()
        && hasValidCooldown();
      allow update, delete: if false; // Only allow through admin interface
    }

    // Other appointment status collections
    match /{status} Appointments/{documentId} {
      allow read: if isAuthenticated() && isOwner(resource.data.userId);
      allow write: if false; // Only allow through admin interface
    }

    // Default deny
    match /{document=**} {
      allow read, write: if false;
    }
  }
}